# telegram_adapter.py
import os
import sys
import re
import json
import asyncio
import logging
import requests
from dotenv import load_dotenv
import sqlite3
from typing import Optional
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.request import HTTPXRequest
from datetime import datetime, timezone
def _now_iso(): return datetime.now(timezone.utc).isoformat()

# ---------- Logging ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# ---------- Load engine (your app.py) ----------
import app as engine  # uses your DB, AI, helpers, logger
_engine_flask_app = engine.create_app()  # initializes DB, Gemini, logger, etc.
logger = engine.logger  # reuse same logger

# ---------- Add mastered_topics table if not exists ----------
def ensure_mastered_topics_table():
    conn = engine.db(); cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS mastered_topics (
            wa_id TEXT,
            board TEXT,
            grade INTEGER,
            subject TEXT,
            topic TEXT,
            mastered_at TEXT,
            PRIMARY KEY (wa_id, board, grade, subject, topic)
        )
    ''')
    conn.commit(); conn.close()
ensure_mastered_topics_table()

# Helper: get mastered topics for user
def get_mastered_topics(wa_id, board, grade, subject):
    conn = engine.db(); cur = conn.cursor()
    cur.execute("SELECT topic FROM mastered_topics WHERE wa_id=? AND board=? AND grade=? AND subject=?", (wa_id, board, grade, subject))
    rows = cur.fetchall(); conn.close()
    return set(r[0] for r in rows)

# Helper: mark topic as mastered
def mark_topic_mastered(wa_id, board, grade, subject, topic):
    conn = engine.db(); cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO mastered_topics (wa_id, board, grade, subject, topic, mastered_at) VALUES (?, ?, ?, ?, ?, datetime('now'))", (wa_id, board, grade, subject, topic))
    conn.commit(); conn.close()

load_dotenv()

# ---------- Small helpers ----------
def rowdict(row):
    return dict(row) if row is not None else None

# ---------- Constants ----------
LANGS = ["en", "hi", "mr"]  # English, Hindi, Marathi

IN_STATES = [
    "Andhra Pradesh","Arunachal Pradesh","Assam","Bihar","Chhattisgarh","Goa",
    "Gujarat","Haryana","Himachal Pradesh","Jharkhand","Karnataka","Kerala",
    "Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland",
    "Odisha","Punjab","Rajasthan","Sikkim","Tamil Nadu","Telangana","Tripura",
    "Uttar Pradesh","Uttarakhand","West Bengal","Andaman and Nicobar Islands",
    "Chandigarh","Dadra and Nagar Haveli and Daman and Diu","Delhi","Jammu and Kashmir",
    "Ladakh","Lakshadweep","Puducherry"
]

USER_AGENT = "btrlrn-edu-bot/1.0 (contact: support@example.com)"

ADMIN_IDS = {8140354366}

# ---------- i18n ----------
CAT = {
    "en": {
        "LANG_PROMPT": "Choose your language ЁЯМО",
        "LANG_EN": "English",
        "LANG_HI": "рд╣рд┐рдиреНрджреА",
        "LANG_MR": "рдорд░рд╛рдареА",
        "WELCOME": "ЁЯСЛ Welcome! IтАЩm your Learning Buddy.",
        "STEP": "Step {n}/9 тАв {title}",
        "FIRST_NAME": "ЁЯзТ First Name",
        "ASK_FIRST": "WhatтАЩs your *first name*?",
        "LAST_NAME": "ЁЯСитАНЁЯСйтАНЁЯСз Last Name",
        "ASK_LAST": "Great, {first}! WhatтАЩs your *last name*?",
        "DOB": "ЁЯОВ Date of Birth",
        "ASK_DOB": "Please send your date of birth in *DD-MM-YYYY* (e.g., 25-04-2012).",
        "DOB_BAD": "Oops! Use *DD-MM-YYYY* like *25-04-2012*.",
    "PHONE": "Child Safety Notice",
    "ASK_PHONE": "In the interest of your child's safety, we do not collect any identifiable information at this stage. However, full child and parent KYC will be required when claiming any prizes.",
    "PHONE_BTN": "I acknowledge and agree to these terms",
    "PHONE_BAD": "Please tap the button below to acknowledge and agree to these terms.",
        "CITY": "ЁЯПЩя╕П City",
        "ASK_CITY": "Which *city* do you live in?",
        "BOARD": "ЁЯУЪ Curriculum",
        "ASK_BOARD": "Which curriculum do you study?\nA) CBSE\nB) ICSE\nC) State",
        "BOARD_BTN_CBSE": "CBSE",
        "BOARD_BTN_ICSE": "ICSE",
        "BOARD_BTN_STATE": "State",
        "STATE_GUESS": "ЁЯзн We think your state is *{state}*. Is that right?",
        "YES": "Yes",
        "NO": "No",
        "PICK_STATE": "Please pick your *state*:",
        "GRADE": "ЁЯОУ Grade",
        "ASK_GRADE": "Choose your *grade*:",
        "SUBJECT": "ЁЯза Subject for today",
        "ASK_SUBJECT": "Pick a subject to learn today:",
        "PROFILE_SAVED": "Profile saved тЬЕ",
        "CONTINUE": "Type START when ready, or SUBJECT to switch.",
        "HELP": (
            "Commands:\n"
            "START тАФ begin todayтАЩs AI topic\n"
            "QUIZ тАФ start questions\n"
            "SUBJECT тАФ choose subject\n"
            "PROFILE тАФ edit profile\n"
            "STATS тАФ see your scores\n"
            "RESET тАФ reset session"
        ),
        "FINISH_PROFILE": "LetтАЩs finish your profile first. ЁЯСН",
        "GENERATING": "ЁЯТб Generating todayтАЩs topicтАж",
        "TOPIC": "ЁЯУЪ TodayтАЩs topic: {title} тАФ Level {level}\n\n{intro}\n\nType *QUIZ* to begin.",
        "NO_LESSON": "Type START first to get todayтАЩs lesson.",
        "QUIZ_DONE": "YouтАЩve completed todayтАЩs questions. Type START to begin again.",
        "SESSION_EXPIRED": "Session expired. Type START to begin again.",
        "INVALID_CHOICE": "Please choose a valid option.",
        "SUBJECT_SET": "Subject set to *{subject}*. Type START to begin.",
        "PROFILE_CMD": "What would you like to edit?\nA) Name  B) City  C) State/Curriculum  D) Grade  E) Subject",
        "PROFILE_UPDATED": "Profile updated. Type START to continue.",
        "PLEASE_ABCD": "Please tap A, B, C, or D.",
        "AI_ERROR": "Sorry, I couldnтАЩt generate todayтАЩs topic. Please try START again.",
        "RANK": "ЁЯПЖ Leaderboard (MVP mock):\n1) You тАФ 3 pts\n2) Student B тАФ 2 pts\n3) Student C тАФ 1 pt",
        "RESET_OK": "Session reset. Type START to begin.",
        "STATS_HEADER": "ЁЯУИ Recent quizzes:",
        "STATS_EMPTY": "No quiz history yet. Type START to begin!",
    },
    "hi": {
        "LANG_PROMPT": "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ ЁЯМО",
        "LANG_EN": "English",
        "LANG_HI": "рд╣рд┐рдиреНрджреА",
        "LANG_MR": "рдорд░рд╛рдареА",
        "WELCOME": "ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ Learning Buddy рд╣реВрдБред",
        "STEP": "рдХрджрдо {n}/9 тАв {title}",
        "FIRST_NAME": "ЁЯзТ рдкрд╣рд▓рд╛ рдирд╛рдо",
        "ASK_FIRST": "рдЖрдкрдХрд╛ *рдкрд╣рд▓рд╛ рдирд╛рдо* рдХреНрдпрд╛ рд╣реИ?",
        "LAST_NAME": "ЁЯСитАНЁЯСйтАНЁЯСз рдЙрдкрдирд╛рдо",
        "ASK_LAST": "рд╢рд╛рдирджрд╛рд░, {first}! рдЖрдкрдХрд╛ *рдЙрдкрдирд╛рдо* рдХреНрдпрд╛ рд╣реИ?",
        "DOB": "ЁЯОВ рдЬрдиреНрдорддрд┐рдерд┐",
        "ASK_DOB": "*DD-MM-YYYY* рдореЗрдВ рдЬрдиреНрдорддрд┐рдерд┐ рднреЗрдЬреЗрдВ (рдЬреИрд╕реЗ 25-04-2012)ред",
        "DOB_BAD": "рдУрд╣! рдХреГрдкрдпрд╛ *DD-MM-YYYY* рдЬреИрд╕реЗ *25-04-2012* рднреЗрдЬреЗрдВред",
    "PHONE": "рдмрд╛рд▓ рд╕реБрд░рдХреНрд╖рд╛ рд╕реВрдЪрдирд╛",
    "ASK_PHONE": "рдмрдЪреНрдЪреЗ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП, рд╣рдо рдЗрд╕ рдЪрд░рдг рдореЗрдВ рдХреЛрдИ рдкрд╣рдЪрд╛рди рдпреЛрдЧреНрдп рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд▓реЗрддреЗ рд╣реИрдВред рд▓реЗрдХрд┐рди рдкреБрд░рд╕реНрдХрд╛рд░ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдЪреНрдЪреЗ рдФрд░ рдЕрднрд┐рднрд╛рд╡рдХ рдХрд╛ рдкреВрд░рд╛ KYC рдЖрд╡рд╢реНрдпрдХ рд╣реЛрдЧрд╛ред",
    "PHONE_BTN": "рдореИрдВ рд╕рд╣рдордд рд╣реВрдБ рдФрд░ рд╢рд░реНрддреЗрдВ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░рддрд╛ рд╣реВрдБ",
    "PHONE_BAD": "рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХреЛ рджрдмрд╛рдХрд░ рд╢рд░реНрддреЗрдВ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВред",
        "CITY": "ЁЯПЩя╕П рд╢рд╣рд░",
        "ASK_CITY": "рдЖрдк рдХрд┐рд╕ *рд╢рд╣рд░* рдореЗрдВ рд░рд╣рддреЗ рд╣реИрдВ?",
        "BOARD": "ЁЯУЪ рдкрд╛рдареНрдпрдХреНрд░рдо",
        "ASK_BOARD": "рдЖрдк рдХреМрди-рд╕рд╛ рдкрд╛рдареНрдпрдХреНрд░рдо рдкрдврд╝рддреЗ рд╣реИрдВ?\nA) CBSE\nB) ICSE\nC) State",
        "BOARD_BTN_CBSE": "CBSE",
        "BOARD_BTN_ICSE": "ICSE",
        "BOARD_BTN_STATE": "State",
        "STATE_GUESS": "ЁЯзн рд╣рдореЗрдВ рд▓рдЧрддрд╛ рд╣реИ рдЖрдкрдХрд╛ рд░рд╛рдЬреНрдп *{state}* рд╣реИред рдХреНрдпрд╛ рдпрд╣ рд╕рд╣реА рд╣реИ?",
        "YES": "рд╣рд╛рдБ",
        "NO": "рдирд╣реАрдВ",
        "PICK_STATE": "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ *рд░рд╛рдЬреНрдп* рдЪреБрдиреЗрдВ:",
        "GRADE": "ЁЯОУ рдХрдХреНрд╖рд╛",
        "ASK_GRADE": "рдЕрдкрдиреА *рдХрдХреНрд╖рд╛* рдЪреБрдиреЗрдВ:",
        "SUBJECT": "ЁЯза рдЖрдЬ рдХрд╛ рд╡рд┐рд╖рдп",
        "ASK_SUBJECT": "рдЖрдЬ рдХреМрди-рд╕рд╛ рд╡рд┐рд╖рдп рдкрдврд╝рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
        "PROFILE_SAVED": "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рд╕реЗрд╡ рд╣реЛ рдЧрдИ тЬЕ",
        "CONTINUE": "рддреИрдпрд╛рд░ рд╣реЛрдВ рддреЛ START рд▓рд┐рдЦреЗрдВ, рдпрд╛ SUBJECT рдмрджрд▓реЗрдВред",
        "HELP": (
            "Commands:\n"
            "START тАФ рдЖрдЬ рдХрд╛ AI рдЯреЙрдкрд┐рдХ\n"
            "QUIZ тАФ рдкреНрд░рд╢реНрди рд╢реБрд░реВ рдХрд░реЗрдВ\n"
            "SUBJECT тАФ рд╡рд┐рд╖рдп рдЪреБрдиреЗрдВ\n"
            "PROFILE тАФ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдмрджрд▓реЗрдВ\n"
            "STATS тАФ рдЖрдкрдХреЗ рд╕реНрдХреЛрд░\n"
            "RESET тАФ рд╕рддреНрд░ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ"
        ),
        "FINISH_PROFILE": "рдкрд╣рд▓реЗ рдЖрдкрдХреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдкреВрд░реА рдХрд░ рд▓реЗрдВред ЁЯСН",
        "GENERATING": "ЁЯТб рдЖрдЬ рдХрд╛ рдЯреЙрдкрд┐рдХ рдмрдирд╛ рд░рд╣рд╛ рд╣реВрдБтАж",
        "TOPIC": "ЁЯУЪ рдЖрдЬ рдХрд╛ рдЯреЙрдкрд┐рдХ: {title} тАФ Level {level}\n\n{intro}\n\nрд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП *QUIZ* рд▓рд┐рдЦреЗрдВред",
        "NO_LESSON": "рдкрд╣рд▓реЗ START рд▓рд┐рдЦрдХрд░ рдЖрдЬ рдХрд╛ рд▓реЗрд╕рди рд▓реЗрдВред",
        "QUIZ_DONE": "рдЖрдЬ рдХреЗ рдкреНрд░рд╢реНрди рдкреВрд░реЗ рд╣реЛ рдЧрдПред рдирдпрд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП START рд▓рд┐рдЦреЗрдВред",
        "SESSION_EXPIRED": "рд╕рддреНрд░ рд╕рдорд╛рдкреНрддред рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП START рд▓рд┐рдЦреЗрдВред",
        "INVALID_CHOICE": "рдХреГрдкрдпрд╛ рд╕рд╣реА рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВред",
        "SUBJECT_SET": "*{subject}* рд╡рд┐рд╖рдп рд╕реЗрдЯ рд╣реЛ рдЧрдпрд╛ред рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП START рд▓рд┐рдЦреЗрдВред",
        "PROFILE_CMD": "рдХреНрдпрд╛ рдмрджрд▓рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?\nA) рдирд╛рдо  B) рд╢рд╣рд░  C) рд░рд╛рдЬреНрдп/рдкрд╛рдареНрдпрдХреНрд░рдо  D) рдХрдХреНрд╖рд╛  E) рд╡рд┐рд╖рдп",
        "PROFILE_UPDATED": "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдЕрдкрдбреЗрдЯ рд╣реБрдИред рдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП START рд▓рд┐рдЦреЗрдВред",
        "PLEASE_ABCD": "рдХреГрдкрдпрд╛ A, B, C рдпрд╛ D рдкрд░ рдЯреИрдк рдХрд░реЗрдВред",
        "AI_ERROR": "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЕрднреА рдЯреЙрдкрд┐рдХ рдирд╣реАрдВ рдмрдирд╛ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ START рдлрд┐рд░ рд╕реЗ рд▓рд┐рдЦреЗрдВред",
        "RANK": "ЁЯПЖ рд▓реАрдбрд░рдмреЛрд░реНрдб (MVP):\n1) рдЖрдк тАФ 3\n2) Student B тАФ 2\n3) Student C тАФ 1",
        "RESET_OK": "рд╕рддреНрд░ рд░реАрд╕реЗрдЯ рд╣реБрдЖред START рд▓рд┐рдЦреЗрдВред",
        "STATS_HEADER": "ЁЯУИ рд╣рд╛рд▓ рдХреЗ рдХреНрд╡рд┐рдЬрд╝:",
        "STATS_EMPTY": "рдЕрднреА рдХреЛрдИ рдХреНрд╡рд┐рдЬрд╝ рдирд╣реАрдВред START рд▓рд┐рдЦреЗрдВ!",
    },
    "mr": {
        "LANG_PROMPT": "рддреБрдордЪреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛ ЁЯМО",
        "LANG_EN": "English",
        "LANG_HI": "рд╣рд┐рдиреНрджреА",
        "LANG_MR": "рдорд░рд╛рдареА",
        "WELCOME": "ЁЯСЛ рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ Learning Buddy рдЖрд╣реЗ.",
        "STEP": "рдкрд╛рдпрд░реА {n}/9 тАв {title}",
        "FIRST_NAME": "ЁЯзТ рдкрд╣рд┐рд▓реЗ рдирд╛рд╡",
        "ASK_FIRST": "рддреБрдордЪреЗ *рдкрд╣рд┐рд▓реЗ рдирд╛рд╡* рдХрд╛рдп?",
        "LAST_NAME": "ЁЯСитАНЁЯСйтАНЁЯСз рдЖрдбрдирд╛рд╡",
        "ASK_LAST": "рдЫрд╛рди, {first}! рддреБрдордЪреЗ *рдЖрдбрдирд╛рд╡* рдХрд╛рдп?",
        "DOB": "ЁЯОВ рдЬрдиреНрдорддрд╛рд░реАрдЦ",
        "ASK_DOB": "*DD-MM-YYYY* рдпрд╛ рд╕реНрд╡рд░реВрдкрд╛рдд рдЬрдиреНрдорддрд╛рд░реАрдЦ рдкрд╛рдард╡рд╛ (рдЙрджрд╛. 25-04-2012).",
        "DOB_BAD": "рдЕрд░реЗрд░реЗ! *DD-MM-YYYY* рдЬрд╕реЗ *25-04-2012* рд╡рд╛рдкрд░рд╛.",
    "PHONE": "рдмрд╛рд▓ рд╕реБрд░рдХреНрд╖рд╛ рд╕реВрдЪрдирд╛",
    "ASK_PHONE": "рдореБрд▓рд╛рдВрдЪреНрдпрд╛ рд╕реБрд░рдХреНрд╖реЗрд╕рд╛рдареА, рдпрд╛ рдЯрдкреНрдкреНрдпрд╛рд╡рд░ рдХреЛрдгрддреАрд╣реА рдУрд│рдЦ рдкрдЯрдгрд╛рд░реА рдорд╛рд╣рд┐рддреА рдШреЗрдд рдирд╛рд╣реА. рдорд╛рддреНрд░ рдмрдХреНрд╖реАрд╕ рдорд┐рд│рд╡рддрд╛рдирд╛ рдкреВрд░реНрдг рдореБрд▓рдЧрд╛ рдЖрдгрд┐ рдкрд╛рд▓рдХ KYC рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ.",
    "PHONE_BTN": "рдореА рд╕рд╣рдордд рдЖрд╣реЗ рдЖрдгрд┐ рдЕрдЯреА рд╕реНрд╡реАрдХрд╛рд░рддреЛ",
    "PHONE_BAD": "рдХреГрдкрдпрд╛ рдЦрд╛рд▓реАрд▓ рдмрдЯрди рджрд╛рдмреВрди рдЕрдЯреА рд╕реНрд╡реАрдХрд╛рд░рд╛.",
        "CITY": "ЁЯПЩя╕П рд╢рд╣рд░",
        "ASK_CITY": "рддреБрдореНрд╣реА рдХреЛрдгрддреНрдпрд╛ *рд╢рд╣рд░рд╛рдд* рд░рд╛рд╣рддрд╛?",
        "BOARD": "ЁЯУЪ рдЕрднреНрдпрд╛рд╕рдХреНрд░рдо",
        "ASK_BOARD": "рддреБрдордЪрд╛ рдЕрднреНрдпрд╛рд╕рдХреНрд░рдо?\nA) CBSE\nB) ICSE\nC) State",
        "BOARD_BTN_CBSE": "CBSE",
        "BOARD_BTN_ICSE": "ICSE",
        "BOARD_BTN_STATE": "State",
        "STATE_GUESS": "ЁЯзн рдЖрдореНрд╣рд╛рд▓рд╛ рд╡рд╛рдЯрддреЗ рддреБрдордЪреЗ рд░рд╛рдЬреНрдп *{state}* рдЖрд╣реЗ. рдмрд░реЛрдмрд░?",
        "YES": "рд╣реЛрдп",
        "NO": "рдирд╛рд╣реА",
        "PICK_STATE": "рдХреГрдкрдпрд╛ рддреБрдордЪреЗ *рд░рд╛рдЬреНрдп* рдирд┐рд╡рдбрд╛:",
        "GRADE": "ЁЯОУ рдЗрдпрддреНрддрд╛",
        "ASK_GRADE": "рддреБрдордЪреА *рдЗрдпрддреНрддрд╛* рдирд┐рд╡рдбрд╛:",
        "SUBJECT": "ЁЯза рдЖрдЬрдЪрд╛ рд╡рд┐рд╖рдп",
        "ASK_SUBJECT": "рдЖрдЬ рдХреЛрдгрддрд╛ рд╡рд┐рд╖рдп рд╢рд┐рдХрд╛рдпрдЪрд╛?",
        "PROFILE_SAVED": "рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрд╡ рдЭрд╛рд▓реЗ тЬЕ",
        "CONTINUE": "рддрдпрд╛рд░ рдЭрд╛рд▓реНрдпрд╛рд╡рд░ START, рдирд╛рд╣реАрддрд░ SUBJECT рдмрджрд▓рд╛.",
        "HELP": (
            "Commands:\n"
            "START тАФ рдЖрдЬрдЪрд╛ AI рд╡рд┐рд╖рдп\n"
            "QUIZ тАФ рдкреНрд░рд╢реНрди рд╕реБрд░реВ\n"
            "SUBJECT тАФ рд╡рд┐рд╖рдп рдирд┐рд╡рдбрд╛\n"
            "PROFILE тАФ рдкреНрд░реЛрдлрд╛рдЗрд▓ рдмрджрд▓рд╛\n"
            "STATS тАФ рддреБрдордЪреЗ рд╕реНрдХреЛрдЕрд░реНрд╕\n"
            "RESET тАФ рд╕рддреНрд░ рд░реАрд╕реЗрдЯ"
        ),
        "FINISH_PROFILE": "рдЖрдзреА рддреБрдордЪреА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдкреВрд░реНрдг рдХрд░реВрдпрд╛. ЁЯСН",
        "GENERATING": "ЁЯТб рдЖрдЬрдЪрд╛ рд╡рд┐рд╖рдп рддрдпрд╛рд░ рдХрд░рдд рдЖрд╣реЗтАж",
        "TOPIC": "ЁЯУЪ рдЖрдЬрдЪрд╛ рд╡рд┐рд╖рдп: {title} тАФ Level {level}\n\n{intro}\n\nрд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА *QUIZ* рд▓рд┐рд╣рд╛.",
        "NO_LESSON": "рдкрд╣рд┐рд▓реЗ START рд▓рд┐рд╣рд╛ рдЖрдгрд┐ рдЖрдЬрдЪрд╛ рд▓реЗрд╕рди рдШреНрдпрд╛.",
        "QUIZ_DONE": "рдЖрдЬрдЪреЗ рдкреНрд░рд╢реНрди рдкреВрд░реНрдг. рдирд╡реАрди рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА START рд▓рд┐рд╣рд╛.",
        "SESSION_EXPIRED": "рд╕рддреНрд░ рд╕рдВрдкрд▓реЗ. рдкреБрдиреНрд╣рд╛ рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА START рд▓рд┐рд╣рд╛.",
        "INVALID_CHOICE": "рдХреГрдкрдпрд╛ рдпреЛрдЧреНрдп рдкрд░реНрдпрд╛рдп рдирд┐рд╡рдбрд╛.",
        "SUBJECT_SET": "*{subject}* рд╡рд┐рд╖рдп рд╕реЗрдЯ. рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА START рд▓рд┐рд╣рд╛.",
        "PROFILE_CMD": "рдХрд╛рдп рдмрджрд▓рд╛рдпрдЪреЗ?\nA) рдирд╛рд╡  B) рд╢рд╣рд░  C) рд░рд╛рдЬреНрдп/рдЕрднреНрдпрд╛рд╕рдХреНрд░рдо  D) рдЗрдпрддреНрддрд╛  E) рд╡рд┐рд╖рдп",
        "PROFILE_UPDATED": "рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЕрдкрдбреЗрдЯ. рдкреБрдвреЗ рдЬрд╛рдгреНрдпрд╛рд╕рд╛рдареА START рд▓рд┐рд╣рд╛.",
        "PLEASE_ABCD": "рдХреГрдкрдпрд╛ A, B, C рдХрд┐рдВрд╡рд╛ D рдЯреЕрдк рдХрд░рд╛.",
        "AI_ERROR": "рдХреНрд╖рдорд╕реНрд╡, рдЖрддреНрддрд╛рдЪ рд╡рд┐рд╖рдп рддрдпрд╛рд░ рдХрд░реВ рд╢рдХрд▓реЛ рдирд╛рд╣реА. START рдкреБрдиреНрд╣рд╛ рд▓рд┐рд╣рд╛.",
        "RANK": "ЁЯПЖ рд▓реАрдбрд░рдмреЛрд░реНрдб (MVP):\n1) рддреБрдореНрд╣реА тАФ 3\n2) Student B тАФ 2\n3) Student C тАФ 1",
        "RESET_OK": "рд╕рддреНрд░ рд░реАрд╕реЗрдЯ. START рд▓рд┐рд╣рд╛.",
        "STATS_HEADER": "ЁЯУИ рдЕрд▓реАрдХрдбреАрд▓ рдХреНрд╡рд┐рдЭ:",
        "STATS_EMPTY": "рдЕрдЬреВрди рдХреНрд╡рд┐рдЭ рдирд╛рд╣реА. START рд▓рд┐рд╣рд╛!",
    },
}

def t(key: str, lang: str, **kwargs) -> str:
    lang = lang if lang in CAT else "en"
    return (CAT[lang].get(key) or CAT["en"].get(key, key)).format(**kwargs)

# ---------- Keyboards ----------
def kb_lang():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(CAT["en"]["LANG_EN"], callback_data="LANG:en"),
         InlineKeyboardButton(CAT["hi"]["LANG_HI"], callback_data="LANG:hi"),
         InlineKeyboardButton(CAT["mr"]["LANG_MR"], callback_data="LANG:mr")]
    ])

def kb_boards(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(t("BOARD_BTN_CBSE", lang), callback_data="BOARD:CBSE"),
         InlineKeyboardButton(t("BOARD_BTN_ICSE", lang), callback_data="BOARD:ICSE")],
        [InlineKeyboardButton(t("BOARD_BTN_STATE", lang), callback_data="BOARD:STATE")]
    ])

def kb_yesno(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(t("YES", lang), callback_data="YN:Y"),
         InlineKeyboardButton(t("NO", lang), callback_data="YN:N")]
    ])

def kb_states_page(lang, start=0, size=8):
    chunk = IN_STATES[start:start+size]
    rows = [[InlineKeyboardButton(name, callback_data=f"STATE:{name}")]
            for name in chunk]
    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton("┬л Prev", callback_data=f"PG:{max(0,start-size)}"))
    if start + size < len(IN_STATES):
        nav.append(InlineKeyboardButton("Next ┬╗", callback_data=f"PG:{start+size}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(rows)

def kb_grades(lang):
    rows = []
    row = []
    for g in range(6, 13):  # 6..12
        row.append(InlineKeyboardButton(str(g), callback_data=f"GRADE:{g}"))
        if len(row) == 4:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def kb_subjects(subs):
    return InlineKeyboardMarkup([[InlineKeyboardButton(name, callback_data=f"SUBJ:{i}")]
                                 for i, name in enumerate(subs)])

def kb_abcd():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("A", callback_data="ANS:A"), InlineKeyboardButton("B", callback_data="ANS:B")],
        [InlineKeyboardButton("C", callback_data="ANS:C"), InlineKeyboardButton("D", callback_data="ANS:D")],
    ])

def kb_next_question():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Next Question", callback_data="NEXTQ")]
    ])

# ---------- Validation ----------
DOB_RE = re.compile(r"^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(20\d{2}|19\d{2})$")
def valid_dob(ddmmyyyy: str) -> bool:
    return bool(DOB_RE.match(ddmmyyyy))

def clean_phone(s: str) -> str:
    digits = re.sub(r"\D", "", s or "")
    if digits.startswith("91") and len(digits) == 12:
        digits = digits[2:]
    return digits

def valid_indian_mobile10(s: str) -> bool:
    return bool(re.match(r"^[6-9]\d{9}$", s or ""))

# ---------- Geocoding ----------
def lookup_state_from_city(city: str) -> str | None:
    try:
        url = "https://nominatim.openstreetmap.org/search"
        params = {"city": city, "country": "India", "format": "json", "addressdetails": 1, "limit": 1}
        headers = {"User-Agent": USER_AGENT}
        r = requests.get(url, params=params, headers=headers, timeout=8)
        r.raise_for_status()
        arr = r.json()
        if not arr: return None
        addr = arr[0].get("address", {})
        state = addr.get("state") or addr.get("state_district")
        if state in IN_STATES:
            return state
        for s in IN_STATES:
            if s.lower() == (state or "").lower():
                return s
        return None
    except Exception as e:
        logger.warning(f"[TG] geocode fail city={city}: {e}")
        return None

# ---------- Language helpers ----------
def get_lang(wa_id: str) -> str:
    u = rowdict(engine.get_user(wa_id))
    return (u["language"] if u and "language" in u and u["language"] else "en")

def set_lang(wa_id: str, lang: str):
    if lang not in LANGS: lang = "en"
    engine.upsert_user(wa_id, language=lang)

# ---------- Translation using engine's Gemini ----------
def translate_lesson_if_needed(lesson: dict, lang: str) -> dict:
    if lang == "en":
        return lesson
    try:
        prompt = (
            "Translate the following lesson JSON to the target language. "
            "Keep JSON structure and options A-D exactly the same. "
            f"Target language code: {lang} "
            "Return JSON only.\n\n" + json.dumps(lesson, ensure_ascii=False)
        )
        resp = engine.gemini_model.generate_content(prompt, generation_config={"temperature": 0.2})
        txt = (resp.text or "").strip()
        m = re.search(r"(\{.*\})", txt, flags=re.S)
        raw = m.group(1) if m else txt
        data = json.loads(raw)
        if isinstance(data.get("questions"), list) and len(data["questions"]) == 3:
            return data
    except Exception as e:
        logger.warning(f"[TG] translate fail; using original EN. err={e}")
    return lesson

# ---------- ID helpers ----------
def uid_from_tg(update: Update) -> str:
    if update and getattr(update, 'effective_chat', None) and getattr(update.effective_chat, 'id', None):
        if update and getattr(update, 'effective_chat', None):
            chat = update.effective_chat
            if chat is not None and hasattr(chat, 'id') and chat.id is not None:
                return f"telegram:{chat.id}"
        return ""
    return ""

def step_header(lang: str, n: int, title_key: str) -> str:
    return f"{t('STEP', lang, n=n, title=t(title_key, lang))}"

# ---------- Flow: senders ----------
async def send_quiz_question(update_or_query, wa_id, lesson, q_index):
    if not lesson or "questions" not in lesson or lesson["questions"] is None:
        return
    if q_index is None or q_index >= len(lesson["questions"]):
        return
    q = lesson["questions"][q_index]
    textq = (
        f"{q['q']}\n"
        f"{q['options'][0]}\n"
        f"{q['options'][1]}\n"
        f"{q['options'][2]}\n"
        f"{q['options'][3]}"
    )
    if isinstance(update_or_query, Update):
        if update_or_query.message is not None:
            return await update_or_query.message.reply_text(textq, reply_markup=kb_abcd())
        if update_or_query.callback_query is not None:
            return await update_or_query.callback_query.edit_message_text(textq, reply_markup=kb_abcd())
    # fallback: do nothing if neither is available
    return

# ---------- Handlers ----------
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    wa_id = uid_from_tg(update)
    sess = rowdict(engine.get_session(wa_id))
    if not sess:
        engine.set_session(wa_id, "ask_lang")
    if update.message is not None:
        await update.message.reply_text(f"{t('WELCOME','en')}\n\n{t('LANG_PROMPT','en')}", reply_markup=kb_lang())

async def admin_stats_handler(update, context):
    if not (update.effective_user and update.effective_user.id in ADMIN_IDS):
        if getattr(update, 'message', None):
            return await update.message.reply_text("Not authorized.")
        return
    import sqlite3
    conn = engine.db(); conn.row_factory = sqlite3.Row; cur = conn.cursor()
    cur.execute("SELECT COUNT(*) AS total FROM users WHERE wa_id LIKE 'telegram:%'")
    total = cur.fetchone()["total"]
    cur.execute("SELECT COUNT(*) AS online FROM users WHERE wa_id LIKE 'telegram:%' AND last_seen >= datetime('now','-10 minutes')")
    online = cur.fetchone()["online"]
    cur.execute("SELECT COUNT(*) AS dau FROM users WHERE wa_id LIKE 'telegram:%' AND last_seen >= date('now')")
    dau = cur.fetchone()["dau"]
    cur.execute("SELECT COUNT(*) AS wau FROM users WHERE wa_id LIKE 'telegram:%' AND last_seen >= date('now','-6 days')")
    wau = cur.fetchone()["wau"]
    conn.close()
    if getattr(update, 'message', None):
        return await update.message.reply_text(
            f"ЁЯСе Total: {total}\nЁЯЯв Online(10m): {online}\nЁЯУЕ DAU: {dau}\nЁЯУИ WAU: {wau}"
        )
    return

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):

    wa_id = uid_from_tg(update)
    lang = 'en'
    sess = rowdict(engine.get_session(wa_id))
    if sess and 'lang' in sess:
        lang = sess['lang']
    if update.message:
        return await update.message.reply_text(t("HELP", lang))
    return

async def quiz_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return await text_handler(update, ctx, forced_text="QUIZ")

async def subject_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return await text_handler(update, ctx, forced_text="SUBJECT")

async def profile_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return await text_handler(update, ctx, forced_text="PROFILE")

async def stats_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return await text_handler(update, ctx, forced_text="STATS")

async def reset_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return await text_handler(update, ctx, forced_text="RESET")
    return

async def contact_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    wa_id = uid_from_tg(update)
    engine.upsert_user(wa_id, last_seen=_now_iso())
    u = rowdict(engine.get_user(wa_id))
    if not u or "first_seen" not in u or not u["first_seen"]:
        engine.upsert_user(wa_id, first_seen=_now_iso())
    lang = get_lang(wa_id)
    sess = rowdict(engine.get_session(wa_id))
    if not (sess and sess["stage"] == "ask_phone"):
        return
    contact = update.message.contact if update.message and getattr(update.message, 'contact', None) else None
    if not contact or not getattr(contact, 'phone_number', None):
        return
    phone = clean_phone(contact.phone_number)
    if not valid_indian_mobile10(phone):
        if update.message:
            return await update.message.reply_text(t("PHONE_BAD", lang))
        return
    engine.upsert_user(wa_id, phone=phone)
    engine.set_session(wa_id, "ask_city")
    if update.message:
        return await update.message.reply_text(
            f"{step_header(lang, 5, 'CITY')}\n{t('ASK_CITY', lang)}",
            reply_markup=None
        )
    return

def profile_missing_for_flow(u) -> bool:
    if not u: return True
    required = ("first_name","last_name","dob","phone","city","board","grade")
    return any((k not in u or u[k] is None or u[k] == "") for k in required)

def parse_board_choice(text: str) -> str | None:
    if not text: return None
    tt = text.strip().upper()
    if tt in ("A","CBSE"): return "CBSE"
    if tt in ("B","ICSE"): return "ICSE"
    if tt in ("C","STATE","STATE BOARD","STATEBOARD"): return "STATE"
    return None

def best_match_state(s: str) -> str | None:
    s = (s or "").strip().lower()
    for st in IN_STATES:
        if st.lower() == s:
            return st
    for st in IN_STATES:
        if s and st.lower().startswith(s):
            return st
    return None

def subjects_for_user(wa_id: str):
    u = rowdict(engine.get_user(wa_id))
    board = (u["board"] if u and "board" in u and u["board"] else "")
    grade = str(u["grade"] if u and "grade" in u and u["grade"] else "")
    # Query subjects from syllabus table for this board and grade
    subs = []
    try:
        conn = engine.db(); cur = conn.cursor()
        cur.execute("SELECT DISTINCT subject FROM syllabus WHERE board=? AND grade=?", (board, grade))
        subs = [r[0] for r in cur.fetchall()]
        conn.close()
    except Exception as e:
        logger.error(f"[TG] subjects_for_user error: {e}")
        subs = []
    # Fallback to defaults if none found or error
    if not subs:
        subs = ["English","Mathematics","Science","Social Science"]
    return subs

# Helper: get topics for subject/grade/board, excluding mastered
def topics_for_user(wa_id, board, grade, subject):
    # Get all topics from syllabus_db
    # Normalize board value for syllabus lookup
    canonical_board = board
    if board and board.startswith("STATE:"):
        canonical_board = "STATE"
    conn = engine.db(); cur = conn.cursor()
    cur.execute("SELECT topic FROM syllabus WHERE board=? AND grade=? AND subject=?", (canonical_board, grade, subject))
    all_topics = [r[0] for r in cur.fetchall()]
    conn.close()
    mastered = get_mastered_topics(wa_id, canonical_board, grade, subject)
    return [t for t in all_topics if t not in mastered]

async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE, forced_text: Optional[str] = None):
    wa_id = uid_from_tg(update)
    engine.upsert_user(wa_id, last_seen=_now_iso())
    u = rowdict(engine.get_user(wa_id))
    if not u or not u.get("first_seen"):
        engine.upsert_user(wa_id, first_seen=_now_iso())

    # Use forced_text if provided, else use message text
    if forced_text is not None:
        text = forced_text
        up = forced_text.upper()
    else:
        text = (update.message.text.strip() if update.message and update.message.text else "")
        up = text.upper()
    logger.info(f"[TG] INBOUND from={wa_id} body={text!r}")

    user = rowdict(engine.get_user(wa_id))
    sess = rowdict(engine.get_session(wa_id))
    lang = get_lang(wa_id)

    # ----------- Onboarding & Guard -----------
    # Debug logging for onboarding triggers
    logger.info(f"[ONBOARDING CHECK] user={user} session={sess} missing_profile={profile_missing_for_flow(user) if user else 'no user'}")
    if not user or (sess and (sess["stage"] or "").startswith("ask_")) or profile_missing_for_flow(user):
        stage = (sess["stage"] if sess else "ask_lang")

        # Onboarding logic uses text, not up
        if stage == "ask_lang":
            engine.set_session(wa_id, "ask_lang")
            if update.message:
                return await update.message.reply_text(f"{t('WELCOME','en')}\n\n{t('LANG_PROMPT','en')}", reply_markup=kb_lang())
            return

        if stage == "ask_first" or (user and not user.get("first_name")):
            if not text:
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 1, 'FIRST_NAME')}\n{t('ASK_FIRST', lang)}")
                return
            engine.upsert_user(wa_id, first_name=text)
            engine.set_session(wa_id, "ask_last")
            if update.message:
                return await update.message.reply_text(
                    f"{step_header(lang, 2, 'LAST_NAME')}\n{t('ASK_LAST', lang, first=text)}"
                )
            return

        if stage == "ask_last" or (user and not user.get("last_name")):
            if not text:
                first = (user or {}).get("first_name","")
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 2, 'LAST_NAME')}\n{t('ASK_LAST', lang, first=first)}")
                return
            engine.upsert_user(wa_id, last_name=text)
            engine.set_session(wa_id, "ask_dob")
            if update.message:
                return await update.message.reply_text(f"{step_header(lang, 3, 'DOB')}\n{t('ASK_DOB', lang)}")
            return

        if stage == "ask_dob" or (user and not user.get("dob")):
            if not text or not valid_dob(text):
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 3, 'DOB')}\n{t('DOB_BAD', lang)}")
                return
            engine.upsert_user(wa_id, dob=text)
            engine.set_session(wa_id, "ask_phone")
            kb = ReplyKeyboardMarkup([[KeyboardButton(t("PHONE_BTN", lang))]], resize_keyboard=True, one_time_keyboard=True)
            if update.message:
                return await update.message.reply_text(f"{step_header(lang, 4, 'PHONE')}\n{t('ASK_PHONE', lang)}", reply_markup=kb)
            return

        if stage == "ask_phone":
            # Show safety message and acknowledgment button
            if text.strip() == t("PHONE_BTN", lang):
                engine.set_session(wa_id, "ask_city")
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 5, 'CITY')}\n{t('ASK_CITY', lang)}", reply_markup=None)
                return
            kb = ReplyKeyboardMarkup([[KeyboardButton(t("PHONE_BTN", lang))]], resize_keyboard=True, one_time_keyboard=True)
            if update.message:
                return await update.message.reply_text(t("ASK_PHONE", lang), reply_markup=kb)
            return

        if stage == "ask_city" or (user and not user.get("city")):
            if not text:
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 5, 'CITY')}\n{t('ASK_CITY', lang)}")
                return
            engine.upsert_user(wa_id, city=text)
            engine.set_session(wa_id, "ask_board")
            if update.message:
                return await update.message.reply_text(
                    f"{step_header(lang, 6, 'BOARD')}\n{t('ASK_BOARD', lang)}",
                    reply_markup=kb_boards(lang)
                )
            return

        if stage == "ask_board" or (user and not user.get("board")):
            choice = parse_board_choice(text)
            if not choice:
                if update.message:
                    return await update.message.reply_text(t("INVALID_CHOICE", lang), reply_markup=kb_boards(lang))
                return
            if choice in ("CBSE","ICSE"):
                engine.upsert_user(wa_id, board=choice)
                engine.set_session(wa_id, "ask_grade")
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 8, 'GRADE')}\n{t('ASK_GRADE', lang)}", reply_markup=kb_grades(lang))
                return
            # Only run state guessing for 'State' board
            if choice == "STATE":
                city = (rowdict(engine.get_user(wa_id)) or {}).get("city","")
                guessed = lookup_state_from_city(city)
                engine.upsert_user(wa_id, board="STATE")  # temporary until confirmation
                if guessed:
                    engine.set_session(wa_id, f"confirm_state:{guessed}")
                    if update.message:
                        return await update.message.reply_text(
                            f"{step_header(lang, 7, 'BOARD')}\n{t('STATE_GUESS', lang, state=guessed)}",
                            reply_markup=kb_yesno(lang),
                        )
                    return
                else:
                    engine.set_session(wa_id, "pick_state:0")
                    if update.message:
                        return await update.message.reply_text(
                            f"{step_header(lang, 7, 'BOARD')}\n{t('PICK_STATE', lang)}",
                            reply_markup=kb_states_page(lang, 0),
                        )
                    return

        if stage.startswith("confirm_state:"):
            guessed = stage.split(":",1)[1]
            affirmative = text.strip().lower() in ("y","yes","ha","haan","haanji","ho","hoi","рд╣реЛ","рд╣рд╛рдБ")
            if affirmative:
                engine.upsert_user(wa_id, board=f"STATE: {guessed}", state=guessed)
                engine.set_session(wa_id, "ask_grade")
                if update.message:
                    return await update.message.reply_text(f"{step_header(lang, 8, 'GRADE')}\n{t('ASK_GRADE', lang)}", reply_markup=kb_grades(lang))
                return
            engine.set_session(wa_id, "pick_state:0")
            if update.message:
                return await update.message.reply_text(f"{step_header(lang, 7, 'BOARD')}\n{t('PICK_STATE', lang)}", reply_markup=kb_states_page(lang, 0))
            return

        if stage.startswith("pick_state:"):
            pick = best_match_state(text)
            if not pick:
                if update.message:
                    return await update.message.reply_text(t("INVALID_CHOICE", lang), reply_markup=kb_states_page(lang, 0))
                return
            engine.upsert_user(wa_id, board=f"STATE: {pick}", state=pick)
            engine.set_session(wa_id, "ask_grade")
            if update.message:
                return await update.message.reply_text(f"{step_header(lang, 8, 'GRADE')}\n{t('ASK_GRADE', lang)}", reply_markup=kb_grades(lang))
            return

        if stage == "ask_grade" or (user and not user.get("grade")):
            g = re.sub(r"\D","", text or "")
            if not g or not (6 <= int(g) <= 12):
                if update.message:
                    return await update.message.reply_text(t("INVALID_CHOICE", lang), reply_markup=kb_grades(lang))
                return
            engine.upsert_user(wa_id, grade=g, subject="Mathematics", level=1, streak=0)
            subs = subjects_for_user(wa_id)
            engine.set_session(wa_id, "choose_subject")
            if update.message:
                await update.message.reply_text(f"{t('PROFILE_SAVED', lang)}")
                return await update.message.reply_text(
                    f"{step_header(lang, 9, 'SUBJECT')}\n{t('ASK_SUBJECT', lang)}",
                    reply_markup=kb_subjects(subs)
                )
            return

        if update.message:
            return await update.message.reply_text(t("FINISH_PROFILE", lang))
        return

    # ---------- Commands (post-onboarding) ----------
    # up is already set above

    if up == "HELP":
        if update.message:
            return await update.message.reply_text(t("HELP", lang))
        return

    if up == "PROFILE":
        engine.set_session(wa_id, "profile_menu")
        u = rowdict(engine.get_user(wa_id))
        profile_lines = []
        if u:
            profile_lines.append("Your current profile:")
            profile_lines.append(f"A) Name: {u.get('first_name','')} {u.get('last_name','')}")
            profile_lines.append(f"B) City: {u.get('city','')}")
            profile_lines.append(f"C) State/Curriculum: {u.get('state','') or u.get('board','')}")
            profile_lines.append(f"D) Grade: {u.get('grade','')}")
            profile_lines.append(f"E) Subject: {u.get('subject','')}")
            profile_lines.append("")
        profile_lines.append(t("PROFILE_CMD", lang))
        msg = "\n".join(profile_lines)
        if update.message:
            return await update.message.reply_text(msg)
        return

    if up == "RESET":
        engine.set_session(wa_id, "idle", 0, 0, None)
        if update.message:
            return await update.message.reply_text(t("RESET_OK", lang))
        return

    if up == "RANK":
        if update.message:
            return await update.message.reply_text(t("RANK", lang))
        return

    if up == "STATS":
        conn = engine.db(); cur = conn.cursor()
        cur.execute("SELECT subject, level, score, total FROM history WHERE wa_id=? ORDER BY taken_at DESC LIMIT 5", (wa_id,))
        rows = cur.fetchall(); conn.close()
        if not rows:
            if update.message:
                return await update.message.reply_text(t("STATS_EMPTY", lang))
            return
        lines = [t("STATS_HEADER", lang)] + [f"- {r['subject']} L{r['level']}: {r['score']}/{r['total']}" for r in rows]
        if update.message:
            return await update.message.reply_text("\n".join(lines))
        return

    if up == "SUBJECT":
        subs = subjects_for_user(wa_id)
        engine.set_session(wa_id, "choose_subject")
        if update.message:
            await update.message.reply_text(t("ASK_SUBJECT", lang), reply_markup=kb_subjects(subs))
        return

    # Explicit topic selection after subject pick (for CBSE)
    if up == "TOPIC":
        user = rowdict(engine.get_user(wa_id))
        board = user.get("board") if user else None
        grade = user.get("grade") if user else None
        subject = user.get("subject") if user else None
        topics = topics_for_user(wa_id, board, grade, subject)
        if not topics:
            if update.message:
                return await update.message.reply_text(f"ЁЯОЙ You have mastered all topics in {subject} for Grade {grade}!", parse_mode="Markdown")
            return
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(t, callback_data=f"TOPIC:{i}")] for i, t in enumerate(topics)])
        if update.message:
            return await update.message.reply_text(f"Pick a topic to learn in {subject} (Grade {grade}):", reply_markup=kb)
        return

    if up == "START":
        if update.message:
            await update.message.reply_text(t("GENERATING", lang))
        try:
            user = rowdict(engine.get_user(wa_id))
            level = user.get("level") if user and "level" in user else 1
            trouble = engine.recent_trouble_concepts(wa_id, user.get("subject")) if user else None
            raw_lesson = engine.ai_generate_lesson(
                board=user.get("board") if user else None,
                grade=user.get("grade") if user else None,
                subject_label=user.get("subject") if user else None,
                level=level,
                city=user.get("city") if user else None,
                state=user.get("state") if user else None,
                recent_mistakes=trouble,
                wa_id=wa_id
            ) if user else None
            lesson = translate_lesson_if_needed(raw_lesson, lang) if raw_lesson else None
            lesson_id = engine.save_lesson(
                wa_id=wa_id,
                board=user.get("board") if user else None,
                grade=user.get("grade") if user else None,
                subject_label=user.get("subject") if user else None,
                level=level,
                title=lesson["title"] if lesson else None,
                intro=lesson["intro"] if lesson else None,
                questions=lesson["questions"] if lesson else None
            ) if lesson else None
            engine.set_session(wa_id, "lesson", 0, 0, lesson_id)
            intro = "\n".join(lesson["intro"][:3]) if lesson and "intro" in lesson else ""
            if update.message:
                return await update.message.reply_text(t("TOPIC", lang, title=lesson["title"] if lesson else "", level=level, intro=intro), parse_mode="Markdown")
            return
        except Exception as e:
            logger.error(f"[TG] AI generation error: {e}")
            if update.message:
                return await update.message.reply_text(t("AI_ERROR", lang))
            return

    if up == "QUIZ":
        sess = rowdict(engine.get_session(wa_id))
        if not sess or "lesson_id" not in sess or not sess["lesson_id"]:
            if update.message:
                return await update.message.reply_text(t("NO_LESSON", lang))
            return
        lesson = engine.load_lesson(sess["lesson_id"])
        idx = sess["q_index"] if sess and "q_index" in sess else 0
        qs = lesson["questions"] if lesson and "questions" in lesson else []
        if idx >= len(qs):
            if update.message:
                return await update.message.reply_text(t("QUIZ_DONE", lang))
            return
        engine.update_session(wa_id, stage="quiz")
        return await send_quiz_question(update, wa_id, lesson, idx)

    # Handle editing each profile field (accept any input when stage starts with 'edit_')
    sess = rowdict(engine.get_session(wa_id))
    if sess and "stage" in sess and sess["stage"].startswith("edit_"):
        field = sess["stage"].replace("edit_", "")
        value = text
        # Validate grade
        if field == "grade":
            g = re.sub(r"\D", "", value)
            if not g or not (6 <= int(g) <= 12):
                if update.message:
                    return await update.message.reply_text("Invalid grade. Please enter a number between 6 and 12.")
                return
            value = g
        # Validate subject
        if field == "subject":
            subs = subjects_for_user(wa_id)
            if value not in subs:
                if update.message:
                    return await update.message.reply_text(f"Invalid subject. Please pick one of: {', '.join(subs)}")
                return
        # Update user profile
        engine.upsert_user(wa_id, **{field: value})

        # If city is edited, re-guess state and prompt for confirmation or selection
        if field == "city":
            guessed = lookup_state_from_city(value)
            if guessed:
                engine.set_session(wa_id, f"confirm_state:{guessed}")
                if update.message:
                    return await update.message.reply_text(
                        f"We think your state is *{guessed}*. Is that right?",
                        reply_markup=kb_yesno(lang),
                        parse_mode="Markdown"
                    )
                return
            else:
                engine.set_session(wa_id, "pick_state:0")
                if update.message:
                    return await update.message.reply_text(
                        t("PICK_STATE", lang),
                        reply_markup=kb_states_page(lang, 0)
                    )
                return

        engine.set_session(wa_id, "idle", 0, 0, None)
        if update.message:
            return await update.message.reply_text(t("PROFILE_UPDATED", lang))
        return

    # A/B/C/D/E via text for subject/quiz/profile
    if len(up) == 1 and up in "ABCDE":
        # Profile editing menu
        if sess and "stage" in sess and sess["stage"] == "profile_menu":
            # Map A-E to profile fields
            field_map = {
                "A": ("first_name", "Please enter your first name:"),
                "B": ("city", "Please enter your city:"),
                "C": ("state", "Please enter your state/curriculum (e.g., Maharashtra, CBSE, ICSE):"),
                "D": ("grade", "Please enter your grade (6-12):"),
                "E": ("subject", "Please enter your subject (e.g., Mathematics, Science):"),
            }
            if up in field_map:
                field, prompt = field_map[up]
                engine.set_session(wa_id, f"edit_{field}")
                if update.message:
                    return await update.message.reply_text(prompt)
                return
            if update.message:
                return await update.message.reply_text(t("INVALID_CHOICE", lang))
            return
        # Subject selection menu
        if sess and "stage" in sess and sess["stage"] == "choose_subject":
            subs = subjects_for_user(wa_id)
            i = ord(up) - ord('A')
            if 0 <= i < len(subs):
                engine.upsert_user(wa_id, subject=subs[i], level=1)
                engine.set_session(wa_id, "idle", 0, 0, None)
                kb_start = InlineKeyboardMarkup([[InlineKeyboardButton("START", callback_data="START")]])
                if update.message:
                    return await update.message.reply_text(
                        f"Subject set to *{subs[i]}*. Tap START when you're ready to begin.",
                        parse_mode="Markdown",
                        reply_markup=kb_start
                    )
                return
            if update.message:
                return await update.message.reply_text(t("INVALID_CHOICE", lang))
            return
        # Quiz answer
        if sess and "stage" in sess and sess["stage"] == "quiz":
            user = rowdict(engine.get_user(wa_id))
            reply = engine.process_ai_answer(user, sess, up)
            if update.message:
                if "ЁЯОЙ" in reply:
                    return await update.message.reply_text(reply)
                # After feedback, prompt for next question
                await update.message.reply_text(reply)
                return await update.message.reply_text("Tap below for the next question:", reply_markup=kb_next_question())
            return
        if update.message:
            return await update.message.reply_text(t("PLEASE_ABCD", lang))
        return

    if update.message:
        return await update.message.reply_text("ЁЯСЛ")
    return

async def on_button(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # Handle START button callback
    if update and getattr(update, 'callback_query', None) and getattr(update.callback_query, 'data', None) == "START":
        query = update.callback_query
        data = query.data if query else None
        wa_id = ""
        if query and getattr(query, 'message', None):
            chat_obj = getattr(query.message, 'chat', None)
            if chat_obj and hasattr(chat_obj, 'id'):
                wa_id = f"telegram:{chat_obj.id}"
        lang = get_lang(wa_id)
        user = rowdict(engine.get_user(wa_id))
        if not user:
            if query and getattr(query, 'edit_message_text', None):
                return await query.edit_message_text("Profile not found. Please restart.")
            return
        # Topic selection block
        level = user["level"] if user and "level" in user and user["level"] else 1
        subject = user["subject"] if user and "subject" in user else None
        if data and data.startswith("TOPIC:"):
            j = int(data.split(":",1)[1])
            board = user.get("board") if user else None
            grade = user.get("grade") if user else None
            subject = user.get("subject") if user else None
            topics = topics_for_user(wa_id, board, grade, subject)
            trouble = engine.recent_trouble_concepts(wa_id, subject) if user else None
            if topics and 0 <= j < len(topics):
                chosen_topic = topics[j]
                raw_lesson = engine.ai_generate_lesson(
                    board=board,
                    grade=grade,
                    subject_label=subject,
                    level=level,
                    city=user.get("city") if user else None,
                    state=user.get("state") if user else None,
                    recent_mistakes=trouble,
                    wa_id=wa_id
                ) if user else None
                lesson = translate_lesson_if_needed(raw_lesson, lang) if raw_lesson else None
                lesson_id = engine.save_lesson(
                    wa_id=wa_id,
                    board=board,
                    grade=grade,
                    subject_label=subject,
                    level=level,
                    title=lesson["title"] if lesson else None,
                    intro=lesson["intro"] if lesson else None,
                    questions=lesson["questions"] if lesson else None
                ) if lesson else None
                engine.set_session(wa_id, "lesson", 0, 0, lesson_id)
                intro = "\n".join(lesson["intro"][:3]) if lesson and "intro" in lesson else ""
                if query:
                    return await query.edit_message_text(
                        t("TOPIC", lang, title=lesson["title"] if lesson else "", level=level, intro=intro),
                        parse_mode="Markdown"
                    )
                return
            else:
                # Fallback: if no topics found, prompt AI for a generic lesson/quiz
                if query:
                    await query.edit_message_text("No topics found in syllabus. Generating a lesson and quiz using AI...", parse_mode="Markdown")
                    raw_lesson = engine.ai_generate_lesson(
                        board=board,
                        grade=grade,
                        subject_label=subject,
                        level=level,
                        city=user.get("city") if user else None,
                        state=user.get("state") if user else None,
                        recent_mistakes=trouble,
                        wa_id=wa_id
                    ) if user else None
                    lesson = translate_lesson_if_needed(raw_lesson, lang) if raw_lesson else None
                    lesson_id = engine.save_lesson(
                        wa_id=wa_id,
                        board=board,
                        grade=grade,
                        subject_label=subject,
                        level=level,
                        title=lesson["title"] if lesson else None,
                        intro=lesson["intro"] if lesson else None,
                        questions=lesson["questions"] if lesson else None
                    ) if lesson else None
                    engine.set_session(wa_id, "lesson", 0, 0, lesson_id)
                    intro = "\n".join(lesson["intro"][:3]) if lesson and "intro" in lesson else ""
                    return await query.edit_message_text(
                        t("TOPIC", lang, title=lesson["title"] if lesson else "", level=level, intro=intro),
                        parse_mode="Markdown"
                    )
                return

    # Yes/No for state guess
    # ...existing code...
            board = user.get("board") if user else None
            grade = user.get("grade") if user else None
            topics = topics_for_user(wa_id, board, grade, chosen)
            if not topics:
                if query:
                    return await query.edit_message_text(f"ЁЯОЙ You have mastered all topics in {chosen} for Grade {grade}!", parse_mode="Markdown")
                return
            kb = InlineKeyboardMarkup([[InlineKeyboardButton(t, callback_data=f"TOPIC:{j}")] for j, t in enumerate(topics)])
            if query:
                return await query.edit_message_text(f"Pick a topic to learn in {chosen} (Grade {grade}):", reply_markup=kb)
            return
        if query:
            return await query.answer(t("INVALID_CHOICE", lang), show_alert=True)
        return
    
    # ...existing code...

    # At top of function:
    query = update.callback_query
    data = query.data if query else None
    wa_id = ""
    if query and getattr(query, 'message', None):
        chat_obj = getattr(query.message, 'chat', None)
        if chat_obj and hasattr(chat_obj, 'id'):
            wa_id = f"telegram:{chat_obj.id}"
    lang = get_lang(wa_id)
    user = rowdict(engine.get_user(wa_id))

    # Answer buttons
    if data and data.startswith("ANS:"):
        choice = data.split(":",1)[1]
        sess = rowdict(engine.get_session(wa_id))
        if not (sess and sess["stage"] == "quiz"):
            if query:
                await query.edit_message_text(t("SESSION_EXPIRED", lang))
            return
        reply = engine.process_ai_answer(user, sess, choice)
        if query:
            await query.edit_message_text(reply)
            # Instead of reply_text, send a new message using bot context
            if query.message and hasattr(ctx, 'bot'):
                chat_id = query.message.chat.id if hasattr(query.message, 'chat') and hasattr(query.message.chat, 'id') else None
                if chat_id:
                    await ctx.bot.send_message(chat_id=chat_id,
                        text="Tap below for the next question:",
                        reply_markup=kb_next_question())
            return
        return
    if query:
        await query.answer("OK")

    if query:
        return await query.answer("OK")

# ---------- Launcher (Windows-friendly + tolerant HTTP client) ----------
if __name__ == "__main__":

    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    token = os.environ["TELEGRAM_BOT_TOKEN"].strip()
    # More forgiving HTTP client (fixes intermittent timeouts)
    req = HTTPXRequest(
        connection_pool_size=20,
        connect_timeout=20.0,
        read_timeout=60.0,
        write_timeout=20.0,
        pool_timeout=20.0,
        http_version="1.1",
    )

    app = Application.builder().token(token).request(req).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("adminstats", admin_stats_handler))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("quiz", quiz_cmd))
    app.add_handler(CommandHandler("subject", subject_cmd))
    app.add_handler(CommandHandler("profile", profile_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    from functools import partial
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, ctx: text_handler(update, ctx)))
    app.add_handler(CallbackQueryHandler(on_button))

    print("ЁЯдЦ Telegram bot is runningтАж press Ctrl+C to stop.")
    app.run_polling()

    token = os.environ["TELEGRAM_BOT_TOKEN"].strip()
    # More forgiving HTTP client (fixes intermittent timeouts)
    req = HTTPXRequest(
        connection_pool_size=20,
        connect_timeout=20.0,
        read_timeout=60.0,
        write_timeout=20.0,
        pool_timeout=20.0,
        http_version="1.1",
    )

    app = Application.builder().token(token).request(req).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("adminstats", admin_stats_handler))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(CallbackQueryHandler(on_button))

    print("ЁЯдЦ Telegram bot is runningтАж press Ctrl+C to stop.")
    app.run_polling()